#include<iostream>
#include <string>
#include <cstring>
#include <vector>
#include<ostream>
#include<fstream>
#include<queue>
#define INF 1e9
using namespace std;

vector<int>  shortest_distance(int src,
	vector<vector<pair<int, int> > > adj_list) {

	// Create queue
	priority_queue<pair<int, pair<int, int> >,
		vector<pair<int, pair<int, int>> >,
		greater<pair<int, pair<int, int> > > >nodes_q;

	// Create d and p arrays
	int n = adj_list.size();
	vector<int> d(n, INF);
	vector<int> p(n, -1);

	nodes_q.push({ 0, {src, src} });

	while (!nodes_q.empty()) {
		pair<int, pair<int, int> > cur_p = nodes_q.top();
		nodes_q.pop();
		int cur_node = cur_p.second.first;
		int cur_prev_node = cur_p.second.second;
		int cur_dis = cur_p.first;

		if (d[cur_node] != INF)
			continue;

		d[cur_node] = cur_dis;
		p[cur_node] = cur_prev_node;

		// Add the nodes connected to current one
		for (int i = 0;
			i < adj_list[cur_node].size();
			i++)
		{
			int next_node = adj_list[cur_node][i].first;
			int weight = adj_list[cur_node][i].second;
			if (d[next_node] != INF)
				continue;
			nodes_q.push({ cur_dis + weight,
						  {next_node, cur_node} });
		}
	}

	return d;
}


int flag = 1;
int main()
{
	int n, m, i, j, sum = 0;
        int A, B, C;
	double out;

	int *a, *b, *c;
	double *arr;

	cin >> n;  //number of element
	cin >> m; // number of edges 
	//int **arr = new int*[n];
	vector<vector<pair<int, int> > > adj_list(n*n);
	arr = new double[n];
	a = new int[m];
	b = new int[m];
	c = new int[m];


	for (i = 0; i < m; i++)
	{
		cin >> A;
		a[i] = A;
		cin >> B;
		b[i] = B;
		cin >> C;
		c[i] = C;
		adj_list[A].push_back(make_pair(B, C));
		adj_list[B].push_back(make_pair(A, C));
	}


	for (int i = 0; i < n; i++)
	{
		vector<int> distance = shortest_distance(i, adj_list);
		sum = 0;
		for (int j = 0; j < distance.size(); j++)
			if (distance[j] != INF && distance[j] != 0)
				sum += distance[j];
		out = (n - 1) / (double)sum;
		cout << out << '\n';
		arr[i] = out * 4;
	}

	ofstream myfile;
	myfile.open("/Users/Galal/source/repos/PythonApplication1/PythonApplication1/sh.txt");
	myfile << n << endl;
	myfile << m << endl;
	for (int i = 0; i < m; i++)
	{
		myfile << a[i] << endl;
		myfile << b[i] << endl;
		myfile << c[i] << endl;
		myfile << arr[a[i]] << endl;
		myfile << arr[b[i]] << endl;
	}

	myfile.close();


	return 0;
}
